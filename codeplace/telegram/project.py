from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

TOKEN = '8073665944:AAEq-2eJupeZcOXzZmEn9ocW9wLzu3-xObI'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è"""
    user = update.effective_user
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π BMSTU.\n'
        '–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'
    )
    context.user_data['last_seen'] = datetime.now()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    last_seen = context.user_data.get('last_seen')
    now = datetime.now()
    
    if not last_seen or (now - last_seen) > timedelta(hours=1):
        await start(update, context)
    else:
        context.user_data['last_seen'] = now

def main() -> None:
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()